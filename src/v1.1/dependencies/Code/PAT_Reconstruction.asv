function pa_img = PAT_Reconstruction(inputData, sensorsPositions, scanArray, sensorArray,xRange, yRange, zRange,samplingRate, speedOfSound, method )
%% Back projection image reconstruction
%inputs:
% inputData---------> The raw data which is a 3D matrixt (scans*samples*sensors)
% sensorsPositions -> position of the sensors
% scanArray --------> array that shows the selected scans
% sensorArray ------> array that shows the selected sensors
% xRange -----------> range of the imaging area in x direction
% yRange -----------> range of the imaging area in y direction
% zRange -----------> range of the imaging area in z direction
% samplingRate -----> sampling rate in the data acquisition
% speedOfSound -----> speed of sound in the imaging medium (consider a homogeneous medium)
% method -----------> reconstruction method including: 0=Delay and sum(DAS)...
% 1=  universal back projection(UBP), 2 =coherence factor(CF) DAS,3=Minimum Variance(MV) BP, 4=MV & CF BP, 5=Directivity patern BP, ...

%% calculate imaging area
Npixel_x = size(xRange, 2);
Npixel_y = size(yRange, 2);
Npixel_z = size(zRange, 2);
x_img = ones(Npixel_y,1)*xRange;
y_img = yRange'*ones(1,Npixel_x);
if size(sensorsPositions,2) ==3
z_img_temp = ones(Npixel_y,Npixel_x);
z_img = zeros(Npixel_y,Npixel_x,Npixel_z);
end
lambda = 1000*speedOfSound / samplingRate; % Wavelength[mm]
for i = 1:Npixel_z
    z_img(:,:,i) = z_img_temp*zRange(i);
end
pa_img = zeros(Npixel_y, Npixel_x, Npixel_z); % image buffer
%% Reconstruction
total_angle_weightb = 0.0;
Nsample = size(inputData, 2);
Nstep   = length(sensorArray);
f = waitbar(0,'1','Name','BackProjection Reconstruction',...
    'CreateCancelBtn','setappdata(gcbf,''canceling'',1)');
setappdata(f,'canceling',0);
iCounter = 0;
for i = scanArray
    iCounter  = iCounter+1;
    waitbar(iCounter/length(scanArray),f,'Please Wait ...');
    TP = sensorsPositions(sensorArray,:, i);%
    x_receive = TP(:,1);
    y_receive = TP(:,2);
    z_receive = TP(:,3);
    pa_data = reshape(inputData(i,:,sensorArray),size(inputData,2), []) ;
    pa_img0 = zeros(Npixel_y, Npixel_x, Npixel_z); % image buffer
    total_angle_weight = zeros(Npixel_y, Npixel_x, Npixel_z);
    if method == 2
        coherent_square = zeros(Npixel_y, Npixel_x, Npixel_z);
    elseif method ==3
        temp_img_MV = zeros(Npixel_y, Npixel_x, Npixel_z, Nstep);
    elseif method ==5
        q=zeros(Npixel_x,Npixel_y);
        
        for ii=1:Npixel_x
            for jj=1:Npixel_y
                for kk=1:Npixel_z
                p=zeros(1,Nstep);
                for L=1:Ns
                    p(L)=sqrt((x_range_image(ii)-x_receive(i, L))^2+...
                        (y_range_image(jj)-y_receive(i, L))^2);
                end
                end
                q(jj,ii, kk)= min(p');
            end
        end
    end
    delay = 0/samplingRate;
    tic
    for iStep = 1:Nstep
        dz = z_img - z_receive(iStep);
        %         pa_data_tmp=ifft(fft(pa_data(:,iStep)).*matchedfilter);
        %         pa_data_tmp = [pa_data; 0];
        pa_data_tmp = [pa_data(:,iStep); 0];
        dx = x_img - x_receive(iStep);
        dy = y_img - y_receive(iStep);
        r0_3D = sqrt(x_receive(iStep)^2 + y_receive(iStep)^2 + z_receive(iStep)^2);
        rr0_dis = sqrt(dx.^2+dy.^2); % in plane distance to the detector
        rr0_dis = repmat(rr0_dis,[1, 1, Npixel_z]);
        dx = repmat(dx,[1, 1, Npixel_z]);
        dy = repmat(dy,[1, 1, Npixel_z]);
        rr2 = sqrt(rr0_dis.^2 + dz.^2);           % distance
        %         alpha2 = acos(min(abs((x_receive(iStep)*dx+y_receive(iStep)*dy+z_receiveI*dz)/r0_3D./rr2),0.999))+1.0e-5; % 3D angle
        alpha2 = acos(min(abs((x_receive(iStep)*dx + y_receive(iStep)*dy...
            + z_receive(iStep)*dz)/r0_3D./rr2), 0.999)) + 1.0e-5; % 3D angle
        angle_weight = real(cos(alpha2))./rr2.^2;
        total_angle_weightb = total_angle_weightb + angle_weight;
        IDX = round((rr2/speedOfSound-delay)*samplingRate);
        inrange = (IDX >=50) & (IDX <= Nsample);
        IDX = (inrange).*IDX + (1-inrange).*(Nsample+1);
        temp_img = pa_data_tmp(IDX).*angle_weight;
        if method ==0
            pa_img0 = pa_img0 + temp_img;
            elseif method ==1
            pa_img0 = pa_img0 + temp_img;
            total_angle_weight = total_angle_weight + angle_weight;
        elseif method ==2
            pa_img0 = pa_img0 + temp_img;
            coherent_square = coherent_square + temp_img.^2;
        elseif method ==3
            warning('off')
            temp_img_MV(:,:,:,iStep) = pa_data_tmp(IDX);
        elseif method ==4
            pa_img0 = pa_img0 + temp_img;
            coherent_square = coherent_square + temp_img.^2;
            temp_img_MV(:,:,:,iStep) = pa_data_tmp(IDX);
        elseif method ==5
            Ns = 77;                 % Number of Sensors
            Ls = 60;                 % Lemgth of Sensor Array plane (Ls=<x)
            pitch = Ls/Ns;           % distance between sensors in array [mm]
            ws = 3/4 * pitch;
            alpha = acosd(min(abs(q./rr),0.999))+1.0e-5;
            df = (sin((pi*ws/lambda)*sind(alpha)))/(pi*ws/lambda*sind(alpha));
            Df = (sin(pi*Ls/lambda*sind(alpha)))/(sin(pi*pitch/lambda*sind(alpha)));
            total_D(:,:,i) = total_D(:,:,i) + df(:,:,iStep).*Df(:,:,iStep);
            temp_img_2(:,:,iStep,i) = pa_data_tmp(idx).*df(:,:,iStep).*Df(:,:,iStep);
        pa_img_2(:,:,i) = pa_img_2(:,:,i) + temp_img_2(:,:,iStep,i);
        end
        
    end
    if method == 0
        pa_img = pa_img + pa_img0;
            elseif method == 1
        pa_img = pa_img + pa_img0./total_angle_weight;
    elseif method == 2
        coherent_factor = pa_img0.^2./coherent_square/Nstep;
        pa_img = pa_img + pa_img0.*coherent_factor;
    elseif method == 3
        L = 60;
        cov_temp_all= zeros(L, L);
        aa = ones(L, 1);
        for ii=1:Npixel_y
            for jj = 1:Npixel_x
                for kk = 1:Npixel_z
                    for LStep_1 =1:Nstep-L+1
                        temp_img_all =[];
                        for LStep_2 = LStep_1:LStep_1+L-1
                            temp_img_all = cat(1,temp_img_all ,temp_img_MV(ii,jj,kk,LStep_2));
                        end
                        mean_temp_all = (1/L)*sum(temp_img_all,1);
                        temp_img_all_mines_mean = temp_img_all - repmat(mean_temp_all,L,1);
                        cov_temp_all=cov_temp_all+temp_img_all_mines_mean*temp_img_all_mines_mean';
                    end
                    cov_temp_all=(1/(Nstep-L+1))*cov_temp_all;
                    % calculation of Covariance Matrix
                    W_MV= inv(cov_temp_all)*aa/(aa'*inv(cov_temp_all)*aa);
                    pa_img_MV (ii, jj, kk)=(1/L)*W_MV'*temp_img_all;
                end
            end
        end
        pa_img = pa_img +pa_img_MV;
    elseif method == 4
        coherent_factor = pa_img0.^2./coherent_square/Nstep;
        L = 7;
        cov_temp_all= zeros(L, L);
        aa = ones(L, 1);
        for ii=1:Npixel_y
            for jj = 1:Npixel_x
                for kk = 1:Npixel_z
                    for LStep_1 =1:Nstep-L+1
                        temp_img_all =[];
                        for LStep_2 = LStep_1:LStep_1+L-1
                            temp_img_all = cat(1,temp_img_all ,temp_img_MV(ii,jj,kk,LStep_2));
                        end
                        mean_temp_all = (1/L)*sum(temp_img_all,1);
                        temp_img_all_mines_mean = temp_img_all - repmat(mean_temp_all,L,1);
                        cov_temp_all=cov_temp_all+temp_img_all_mines_mean*temp_img_all_mines_mean';
                    end
                    cov_temp_all=(1/(Nstep-L+1))*cov_temp_all;
                    % calculation of Covariance Matrix
                    W_MV= inv(cov_temp_all)*aa/(aa'*inv(cov_temp_all)*aa);
                    pa_img_MV (ii, jj, kk)=(1/L)*W_MV'*temp_img_all;
                end
            end
        end
        pa_img = pa_img +pa_img_MV.*coherent_factor;
    elseif method ==5
         pa_img_final(:,:,i) = pa_img_2(:,:,i)./total_D(:,:,i);
    end
    
end
% pa_img = pa_img./total_angle_weightb;
delete(f)
end